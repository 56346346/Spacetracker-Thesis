using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Xunit;
using System.Net.Http;
using SpaceTracker;
using System.IO;


namespace SpaceTracker
{
    // Minimal stubs to avoid referencing external packages
    public interface INeo4jConnector
    {
        Task RunWriteQueryAsync(string query, object parameters = null);
    }

    public interface IHttpClientFactory
    {
        HttpClient CreateClient(string name);
    }
}

namespace SpaceTracker.Tests
{
    public class MockConnector : INeo4jConnector
    {
        public List<(string query, object parameters)> Calls { get; } = new();
        public Task RunWriteQueryAsync(string query, object parameters = null)
        {
            Calls.Add((query, parameters));
            return Task.CompletedTask;
        }
    }

    public class DummyFactory : IHttpClientFactory
    {
  private readonly HttpClient _client;
        public DummyFactory(HttpClient? client = null)
        {
            _client = client ?? new HttpClient();
        }        public HttpClient CreateClient(string name) => _client;
    }

    public class SolibriCheckerTests
    {
        [Fact]
        public async Task UpdateLogStatusAsync_SetsRedStatus()
        {
            string xml = "<Issues>" +
                          "<Issue guid='1'><Severity>Warning</Severity></Issue>" +
                          "<Issue guid='2'><Severity>Error</Severity></Issue>" +
                          "<Issue guid='3'><Severity>Warning</Severity></Issue>" +
                          "</Issues>";
            var connector = new MockConnector();
            SolibriChecker.Initialize(new DummyFactory(), connector);
            var checker = SolibriChecker.Instance!;
            await checker.UpdateLogStatusAsync(xml, CancellationToken.None);
            Assert.Contains(connector.Calls, c => ((dynamic)c.parameters).status.Equals("RED"));
        }
        
        [Fact]
        public void InstallRulesetLocally_CopiesFile()
        {
            var temp = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
            Directory.CreateDirectory(temp);
            Environment.SetEnvironmentVariable("ProgramData", temp);
            string src = Path.Combine(temp, "rule.cset");
            File.WriteAllText(src, "dummy");
            var client = new SolibriApiClient(0);
            string dest = client.InstallRulesetLocally(src);
            Assert.True(File.Exists(dest));
        }

        [Fact]
        public async Task EnsureSolibriReadyAsync_WaitsForReady()
        {
            var mock = new RichardSzalay.MockHttp.MockHttpMessageHandler();
            int count = 0;
            mock.When("/ping").Respond("text/plain", "pong");
            mock.When("/status").Respond(() =>
            {
                count++;
                string json = count < 2 ? "{\"busy\":true}" : "{\"busy\":false}";
                return new HttpResponseMessage(System.Net.HttpStatusCode.OK)
                {
                    Content = new StringContent(json, System.Text.Encoding.UTF8, "application/json")
                };
            });
            var client = new HttpClient(mock) { BaseAddress = new Uri("http://localhost") };
            var connector = new MockConnector();
            SolibriChecker.Initialize(new DummyFactory(client), connector);
            await SolibriChecker.Instance!.EnsureSolibriReadyAsync(CancellationToken.None);
            Assert.True(count >= 2);
        }

        [Fact]
        public async Task GetBcfAsync_ReturnsContent()
        {
            var mock = new RichardSzalay.MockHttp.MockHttpMessageHandler();
            mock.When("/bcfxml/two?scope=all").Respond("application/xml", "<b>c</b>");
            var client = new HttpClient(mock) { BaseAddress = new Uri("http://localhost") };
            var connector = new MockConnector();
            SolibriChecker.Initialize(new DummyFactory(client), connector);
            var checker = SolibriChecker.Instance!;
            string result = await checker.GetBcfAsync("id", ct: CancellationToken.None);
            Assert.Equal("<b>c</b>", result);
        }
    }
}