using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Xunit;
using System.Net.Http;
using SpaceTracker;

namespace SpaceTracker
{
    // Minimal stubs to avoid referencing external packages
    public interface INeo4jConnector
    {
        Task RunWriteQueryAsync(string query, object parameters = null);
    }

    public interface IHttpClientFactory
    {
        HttpClient CreateClient(string name);
    }
}

namespace SpaceTracker.Tests
{
    public class MockConnector : INeo4jConnector
    {
        public List<(string query, object parameters)> Calls { get; } = new();
        public Task RunWriteQueryAsync(string query, object parameters = null)
        {
            Calls.Add((query, parameters));
            return Task.CompletedTask;
        }
    }

    public class DummyFactory : IHttpClientFactory
    {
        private readonly HttpClient _client = new();
        public HttpClient CreateClient(string name) => _client;
    }

    public class SolibriCheckerTests
    {
        [Fact]
        public async Task UpdateLogStatusAsync_SetsRedStatus()
        {
            string xml = "<Issues>" +
                          "<Issue guid='1'><Severity>Warning</Severity></Issue>" +
                          "<Issue guid='2'><Severity>Error</Severity></Issue>" +
                          "<Issue guid='3'><Severity>Warning</Severity></Issue>" +
                          "</Issues>";
            var connector = new MockConnector();
            SolibriChecker.Initialize(new DummyFactory(), connector);
            var checker = SolibriChecker.Instance!;
            await checker.UpdateLogStatusAsync(xml, CancellationToken.None);
            Assert.Contains(connector.Calls, c => ((dynamic)c.parameters).status.Equals("RED"));
        }
    }
}